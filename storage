const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/chat_app', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error);
  });

// Define a schema for chat messages
const chatSchema = new mongoose.Schema({
  message: {
    type: String,
    required: true
  }
});

// Create a mongoose model based on the schema
const ChatMessage = mongoose.model('ChatMessage', chatSchema);

// Route to handle the creation of a new chat message
app.post('/messages', (req, res) => {
  const { message } = req.body;

  // Create a new chat message document
  const chatMessage = new ChatMessage({ message });

  // Save the chat message to the database
  chatMessage.save()
    .then(() => {
      res.status(201).json({ success: true, message: 'Message created successfully' });
    })
    .catch((error) => {
      res.status(500).json({ success: false, error: 'Failed to create message' });
    });
});

// Route to handle the retrieval of all chat messages
app.get('/messages', (req, res) => {
  ChatMessage.find()
    .then((messages) => {
      res.json({ messages });
    })
    .catch((error) => {
      res.status(500).json({ error: 'Failed to retrieve messages' });
    });
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
